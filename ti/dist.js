// Generated by CoffeeScript 1.3.3
var Ti, Titanium, TitaniumActivityIndicator, TitaniumAdView, TitaniumButton, TitaniumButtonBar, TitaniumHttpClient, TitaniumImageView, TitaniumLabel, TitaniumNamedNodeMap, TitaniumNavigationGroup, TitaniumNodeList, TitaniumPicker, TitaniumPickerColumn, TitaniumPickerRow, TitaniumProgressBar, TitaniumScrollView, TitaniumSearchBar, TitaniumSlider, TitaniumSplitWindow, TitaniumSwitch, TitaniumTab, TitaniumTabGroup, TitaniumTabbedBar, TitaniumTableView, TitaniumTableViewRow, TitaniumTableViewSection, TitaniumTextArea, TitaniumTextField, TitaniumToolbar, TitaniumView, TitaniumWebView, TitaniumWindow, TitaniumXmlAttr, TitaniumXmlDocument, TitaniumXmlNode, libxmljs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Ti = Titanium = {};

Ti.App = {};

Ti.App.Properties = {
  store: {},
  getString: function(key) {
    return Ti.App.Properties.store[key];
  },
  setString: function(key, value) {
    return Ti.App.Properties.store[key] = value;
  }
};

Ti.Platform = {
  createUUID: function() {
    return 'this-is-a-random-string';
  }
};

libxmljs = require('libxmljs');

TitaniumXmlAttr = (function() {

  function TitaniumXmlAttr(name, value) {
    this.name = name;
    this.value = value;
  }

  return TitaniumXmlAttr;

})();

TitaniumNamedNodeMap = (function() {

  function TitaniumNamedNodeMap(node) {
    this.node = node;
    this.attrs = this.node.attrs();
    this.length = this.attrs.length;
  }

  TitaniumNamedNodeMap.prototype._buildAttr = function(attr) {
    return new TitaniumXmlAttr(attr.name(), attr.value());
  };

  TitaniumNamedNodeMap.prototype.item = function(index) {
    return this._buildAttr(this.attrs[index]);
  };

  TitaniumNamedNodeMap.prototype.getNamedItem = function(name) {
    return this._buildAttr(this.node.attr(name));
  };

  return TitaniumNamedNodeMap;

})();

TitaniumNodeList = (function() {

  function TitaniumNodeList(node) {
    this.node = node;
    this.children = this.node.childNodes();
    this.length = this.children.length;
  }

  TitaniumNodeList.prototype.item = function(index) {
    return new TitaniumXmlNode(this.children[index]);
  };

  return TitaniumNodeList;

})();

TitaniumXmlNode = (function() {

  function TitaniumXmlNode(node) {
    var prefix, _ref, _ref1;
    this.node = node;
    this.TEXT_NODE = 3;
    this.ELEMENT_NODE = 1;
    this.nodeType = (function() {
      switch (this.node.type()) {
        case 'text':
          return this.TEXT_NODE;
        case 'element':
          return this.ELEMENT_NODE;
      }
    }).call(this);
    if (this.nodeType === this.TEXT_NODE) {
      this.nodeValue = this.node.text();
    } else {
      this.nodeName = this.node.name();
      if (prefix = (_ref = this.node.namespace()) != null ? _ref.prefix() : void 0) {
        this.nodeName = [prefix, this.nodeName].join(':');
      }
      if (((_ref1 = this.node.child(0)) != null ? _ref1.type() : void 0) === 'text') {
        this.textContent = this.node.child(0).text();
      }
      this.attributes = new TitaniumNamedNodeMap(this.node);
      this.childNodes = new TitaniumNodeList(this.node);
    }
  }

  return TitaniumXmlNode;

})();

TitaniumXmlDocument = (function() {

  function TitaniumXmlDocument(xml) {
    var xmlDoc;
    xmlDoc = libxmljs.parseXml(xml);
    this.childNodes = new TitaniumNodeList(xmlDoc.root());
  }

  return TitaniumXmlDocument;

})();

Ti.XML = {
  parseString: function(xml) {
    return new TitaniumXmlDocument(xml);
  }
};

Ti.UI = {
  createWindow: function(attributes) {
    return console.log('Create window');
  },
  SIZE: 'TI:UI:SIZE',
  FILL: 'TI:UI:FILL',
  iOS: {},
  iPad: {}
};

Ti.UI.iPhone = {
  TableViewCellSelectionStyle: 'table-view-cell-selection-style',
  SystemButtonStyle: {
    DONE: 'done'
  }
};

TitaniumView = (function() {

  TitaniumView.prototype.tiClassName = 'TiUIView';

  TitaniumView.prototype.bubbleParent = true;

  function TitaniumView(attributes) {
    this.add = __bind(this.add, this);

    var name, value;
    for (name in attributes) {
      value = attributes[name];
      this[name] = value;
    }
    this.children = [];
    this.hidden = false;
  }

  TitaniumView.prototype.applyProperties = function(properties) {
    var key, value, _results;
    _results = [];
    for (key in properties) {
      value = properties[key];
      _results.push(this[key] = value);
    }
    return _results;
  };

  TitaniumView.prototype.addEventListener = function(name, event) {
    return this.on(name, event);
  };

  TitaniumView.prototype.removeEventListener = function(name, event) {
    return this.off(name, event);
  };

  TitaniumView.prototype.fireEvent = function(name, event) {
    var _ref;
    event = _({}).extend({
      source: this
    }, event || {});
    this.trigger(name, event);
    if (this.bubbleParent) {
      return (_ref = this.parent) != null ? _ref.fireEvent(name, event) : void 0;
    }
  };

  TitaniumView.prototype.add = function(view) {
    view.parent = this;
    return this.children.push(view);
  };

  TitaniumView.prototype.remove = function(view) {
    return this.children = _.without(this.children, view);
  };

  TitaniumView.prototype.getChildren = function() {
    return this.children;
  };

  TitaniumView.prototype.getParent = function() {
    return this.parent;
  };

  TitaniumView.prototype.hide = function() {
    return this.hidden = true;
  };

  TitaniumView.prototype.show = function() {
    return this.hidden = false;
  };

  TitaniumView.prototype.toString = function() {
    return "[object " + this.tiClassName + "]";
  };

  return TitaniumView;

})();

Ti.UI.createView = function(attributes) {
  return new TitaniumView(attributes);
};

_.extend(TitaniumView.prototype, Backbone.Events);

TitaniumActivityIndicator = (function(_super) {

  __extends(TitaniumActivityIndicator, _super);

  function TitaniumActivityIndicator() {
    return TitaniumActivityIndicator.__super__.constructor.apply(this, arguments);
  }

  TitaniumActivityIndicator.prototype.tiClassName = 'TiUIActivityIndicator';

  return TitaniumActivityIndicator;

})(TitaniumView);

Ti.UI.createActivityIndicator = function(attributes) {
  return new TitaniumActivityIndicator(attributes);
};

TitaniumButton = (function(_super) {

  __extends(TitaniumButton, _super);

  function TitaniumButton() {
    return TitaniumButton.__super__.constructor.apply(this, arguments);
  }

  TitaniumButton.prototype.tiClassName = 'TiUIButton';

  return TitaniumButton;

})(TitaniumView);

Ti.UI.createButton = function(attributes) {
  return new TitaniumButton(attributes);
};

TitaniumButtonBar = (function(_super) {

  __extends(TitaniumButtonBar, _super);

  function TitaniumButtonBar() {
    return TitaniumButtonBar.__super__.constructor.apply(this, arguments);
  }

  return TitaniumButtonBar;

})(TitaniumView);

Ti.UI.createButtonBar = function(attributes) {
  return new TitaniumButtonBar(attributes);
};

TitaniumImageView = (function(_super) {

  __extends(TitaniumImageView, _super);

  function TitaniumImageView() {
    return TitaniumImageView.__super__.constructor.apply(this, arguments);
  }

  TitaniumImageView.prototype.tiClassName = 'TiUIImageView';

  return TitaniumImageView;

})(TitaniumView);

Ti.UI.createImageView = function(attributes) {
  return new TitaniumImageView(attributes);
};

TitaniumLabel = (function(_super) {

  __extends(TitaniumLabel, _super);

  function TitaniumLabel() {
    return TitaniumLabel.__super__.constructor.apply(this, arguments);
  }

  TitaniumLabel.prototype.tiClassName = 'TiUILabel';

  return TitaniumLabel;

})(TitaniumView);

Ti.UI.createLabel = function(attributes) {
  return new TitaniumLabel(attributes);
};

TitaniumPicker = (function(_super) {

  __extends(TitaniumPicker, _super);

  function TitaniumPicker() {
    this.columns = [];
    TitaniumPicker.__super__.constructor.apply(this, arguments);
  }

  TitaniumPicker.prototype.tiClassName = 'TiUIPicker';

  TitaniumPicker.prototype.add = function(view) {
    var column, _ref;
    if (view._viewName === 'PickerRow') {
      if (!(column = (_ref = this.columns) != null ? _ref[0] : void 0)) {
        column = Ti.UI.createPickerColumn();
        this.columns.push(column);
      }
      return column.addRow(view);
    } else {
      view.parent = this;
      return this.columns.push(view);
    }
  };

  TitaniumPicker.prototype.setColumns = function(columns) {
    this.columns = columns;
  };

  return TitaniumPicker;

})(TitaniumView);

TitaniumPickerColumn = (function(_super) {

  __extends(TitaniumPickerColumn, _super);

  function TitaniumPickerColumn() {
    this.rows = [];
    TitaniumPickerColumn.__super__.constructor.apply(this, arguments);
  }

  TitaniumPickerColumn.prototype.tiClassName = 'TiUIPickerColumn';

  TitaniumPickerColumn.prototype.add = function(view) {
    throw new Error('Rows can not be added to picker columns via `add`');
  };

  TitaniumPickerColumn.prototype.addRow = function(row) {
    row.parent = this;
    return this.rows.push(row);
  };

  TitaniumPickerColumn.prototype.removeRow = function(row) {
    return this.rows = _.without(this.rows, row);
  };

  TitaniumPickerColumn.prototype.appendSection = function(section) {
    section.parent = this;
    return this.sections.push(section);
  };

  TitaniumPickerColumn.prototype.deleteSection = function(index) {
    return this.sections = _.without(this.sections, this.sections[index]);
  };

  return TitaniumPickerColumn;

})(TitaniumView);

TitaniumPickerRow = (function(_super) {

  __extends(TitaniumPickerRow, _super);

  function TitaniumPickerRow() {
    return TitaniumPickerRow.__super__.constructor.apply(this, arguments);
  }

  TitaniumPickerRow.prototype.tiClassName = 'TiUIPickerRow';

  return TitaniumPickerRow;

})(TitaniumView);

Ti.UI.createPicker = function(attributes) {
  return new TitaniumPicker(attributes);
};

Ti.UI.createPickerColumn = function(attributes) {
  return new TitaniumPickerColumn(attributes);
};

Ti.UI.createPickerRow = function(attributes) {
  return new TitaniumPickerRow(attributes);
};

TitaniumProgressBar = (function(_super) {

  __extends(TitaniumProgressBar, _super);

  function TitaniumProgressBar() {
    return TitaniumProgressBar.__super__.constructor.apply(this, arguments);
  }

  TitaniumProgressBar.prototype.tiClassName = 'TiUIProgressBar';

  return TitaniumProgressBar;

})(TitaniumView);

Ti.UI.createProgressBar = function(attributes) {
  return new TitaniumProgressBar(attributes);
};

TitaniumScrollView = (function(_super) {

  __extends(TitaniumScrollView, _super);

  function TitaniumScrollView() {
    return TitaniumScrollView.__super__.constructor.apply(this, arguments);
  }

  TitaniumScrollView.prototype.tiClassName = 'TiUIScrollView';

  return TitaniumScrollView;

})(TitaniumView);

Ti.UI.createScrollView = function(attributes) {
  return new TitaniumScrollView(attributes);
};

TitaniumSearchBar = (function(_super) {

  __extends(TitaniumSearchBar, _super);

  function TitaniumSearchBar() {
    return TitaniumSearchBar.__super__.constructor.apply(this, arguments);
  }

  TitaniumSearchBar.prototype.tiClassName = 'TiUISearchBar';

  TitaniumSearchBar.prototype.setValue = function(value) {
    this.value = value;
    return this.fireEvent('change', {
      value: this.value
    });
  };

  TitaniumSearchBar.prototype.getValue = function() {
    return this.value;
  };

  return TitaniumSearchBar;

})(TitaniumView);

Ti.UI.createSearchBar = function(attributes) {
  return new TitaniumSearchBar(attributes);
};

TitaniumSlider = (function(_super) {

  __extends(TitaniumSlider, _super);

  function TitaniumSlider() {
    return TitaniumSlider.__super__.constructor.apply(this, arguments);
  }

  TitaniumSlider.prototype.tiClassName = 'TiUISlider';

  TitaniumSlider.prototype.setValue = function(value) {
    this.value = value;
    return this.fireEvent('change', {
      value: this.value
    });
  };

  TitaniumSlider.prototype.getValue = function() {
    return this.value;
  };

  return TitaniumSlider;

})(TitaniumView);

Ti.UI.createSlider = function(attributes) {
  return new TitaniumSlider(attributes);
};

TitaniumSwitch = (function(_super) {

  __extends(TitaniumSwitch, _super);

  function TitaniumSwitch() {
    return TitaniumSwitch.__super__.constructor.apply(this, arguments);
  }

  TitaniumSwitch.prototype.tiClassName = 'TiUISwitch';

  TitaniumSwitch.prototype.setValue = function(value) {
    this.value = value;
    return this.fireEvent('change', {
      value: this.value
    });
  };

  TitaniumSwitch.prototype.getValue = function() {
    return this.value;
  };

  return TitaniumSwitch;

})(TitaniumView);

Ti.UI.createSwitch = function(attributes) {
  return new TitaniumSwitch(attributes);
};

TitaniumTabbedBar = (function(_super) {

  __extends(TitaniumTabbedBar, _super);

  function TitaniumTabbedBar() {
    return TitaniumTabbedBar.__super__.constructor.apply(this, arguments);
  }

  TitaniumTabbedBar.prototype.tiClassName = 'TiUITabbedBar';

  return TitaniumTabbedBar;

})(TitaniumView);

Ti.UI.createTabbedBar = function(attributes) {
  return new TitaniumTabbedBar(attributes);
};

Ti.UI.iOS.createTabbedBar = function(attributes) {
  return new TitaniumTabbedBar(attributes);
};

TitaniumTabGroup = (function(_super) {

  __extends(TitaniumTabGroup, _super);

  TitaniumTabGroup.prototype.tiClassName = 'TiUITabGroup';

  function TitaniumTabGroup() {
    this.tabs = [];
    TitaniumTabGroup.__super__.constructor.apply(this, arguments);
  }

  TitaniumTabGroup.prototype.addTab = function(tab) {
    tab.parent = this;
    return this.tabs.push(tab);
  };

  TitaniumTabGroup.prototype.getTabs = function() {
    return this.tabs;
  };

  TitaniumTabGroup.prototype.removeTab = function(tab) {
    return this.tabs = _.without(this.tabs, tab);
  };

  TitaniumTabGroup.prototype.open = function() {};

  return TitaniumTabGroup;

})(TitaniumView);

TitaniumTab = (function(_super) {

  __extends(TitaniumTab, _super);

  function TitaniumTab() {
    return TitaniumTab.__super__.constructor.apply(this, arguments);
  }

  TitaniumTab.prototype.tiClassName = 'TiUITab';

  return TitaniumTab;

})(TitaniumView);

Ti.UI.createTabGroup = function(attributes) {
  return new TitaniumTabGroup(attributes);
};

Ti.UI.createTab = function(attributes) {
  return new TitaniumTab(attributes);
};

TitaniumTableView = (function(_super) {

  __extends(TitaniumTableView, _super);

  function TitaniumTableView() {
    this.rows = [];
    this.sections = [];
    TitaniumTableView.__super__.constructor.apply(this, arguments);
  }

  TitaniumTableView.prototype.tiClassName = 'TiUITableView';

  TitaniumTableView.prototype.add = function(view) {
    throw new Error('Rows can not be added to tables via `add`');
  };

  TitaniumTableView.prototype.appendRow = function(row) {
    row.parent = this;
    return this.rows.push(row);
  };

  TitaniumTableView.prototype.deleteRow = function(index) {
    var row, section;
    row = this.rows[index];
    if (section = row._section) {
      section.rows = _.without(section.rows, row);
    }
    return this.rows = _.without(this.rows, row);
  };

  TitaniumTableView.prototype.appendSection = function(section) {
    section.parent = this;
    return this.sections.push(section);
  };

  TitaniumTableView.prototype.deleteSection = function(index) {
    return this.sections = _.without(this.sections, this.sections[index]);
  };

  return TitaniumTableView;

})(TitaniumView);

TitaniumTableViewRow = (function(_super) {

  __extends(TitaniumTableViewRow, _super);

  function TitaniumTableViewRow() {
    return TitaniumTableViewRow.__super__.constructor.apply(this, arguments);
  }

  TitaniumTableViewRow.prototype.tiClassName = 'TiUITableViewRow';

  return TitaniumTableViewRow;

})(TitaniumView);

TitaniumTableViewSection = (function(_super) {

  __extends(TitaniumTableViewSection, _super);

  TitaniumTableViewSection.prototype.tiClassName = 'TiUITableViewSection';

  function TitaniumTableViewSection() {
    this.rows = [];
    TitaniumTableViewSection.__super__.constructor.apply(this, arguments);
  }

  TitaniumTableViewSection.prototype.add = function(row) {
    row.parent = this;
    row._section = this;
    this.rows.push(row);
    return this.parent.appendRow(row);
  };

  return TitaniumTableViewSection;

})(TitaniumView);

Ti.UI.createTableView = function(attributes) {
  return new TitaniumTableView(attributes);
};

Ti.UI.createTableViewRow = function(attributes) {
  return new TitaniumTableViewRow(attributes);
};

Ti.UI.createTableViewSection = function(attributes) {
  return new TitaniumTableViewSection(attributes);
};

TitaniumTextArea = (function(_super) {

  __extends(TitaniumTextArea, _super);

  function TitaniumTextArea() {
    return TitaniumTextArea.__super__.constructor.apply(this, arguments);
  }

  TitaniumTextArea.prototype.tiClassName = 'TiUITextArea';

  TitaniumTextArea.prototype.setValue = function(value) {
    this.value = value;
    return this.fireEvent('change', {
      value: this.value
    });
  };

  TitaniumTextArea.prototype.getValue = function() {
    return this.value;
  };

  return TitaniumTextArea;

})(TitaniumView);

Ti.UI.createTextArea = function(attributes) {
  return new TitaniumTextArea(attributes);
};

TitaniumTextField = (function(_super) {

  __extends(TitaniumTextField, _super);

  function TitaniumTextField() {
    return TitaniumTextField.__super__.constructor.apply(this, arguments);
  }

  TitaniumTextField.prototype.tiClassName = 'TiUITextField';

  TitaniumTextField.prototype.setValue = function(value) {
    this.value = value;
    return this.fireEvent('change', {
      value: this.value
    });
  };

  TitaniumTextField.prototype.getValue = function() {
    return this.value;
  };

  return TitaniumTextField;

})(TitaniumView);

Ti.UI.createTextField = function(attributes) {
  return new TitaniumTextField(attributes);
};

TitaniumToolbar = (function(_super) {

  __extends(TitaniumToolbar, _super);

  function TitaniumToolbar() {
    return TitaniumToolbar.__super__.constructor.apply(this, arguments);
  }

  TitaniumToolbar.prototype.tiClassName = 'TiUIToolbar';

  return TitaniumToolbar;

})(TitaniumView);

Ti.UI.createToolbar = function(attributes) {
  return new TitaniumToolbar(attributes);
};

Ti.UI.iOS.createToolbar = function(attributes) {
  return new TitaniumToolbar(attributes);
};

TitaniumWebView = (function(_super) {

  __extends(TitaniumWebView, _super);

  function TitaniumWebView() {
    return TitaniumWebView.__super__.constructor.apply(this, arguments);
  }

  TitaniumWebView.prototype.tiClassName = 'TiUIWebView';

  return TitaniumWebView;

})(TitaniumView);

Ti.UI.createWebView = function(attributes) {
  return new TitaniumWebView(attributes);
};

TitaniumWindow = (function(_super) {

  __extends(TitaniumWindow, _super);

  function TitaniumWindow() {
    return TitaniumWindow.__super__.constructor.apply(this, arguments);
  }

  TitaniumWindow.prototype.tiClassName = 'TiUIWindow';

  TitaniumWindow.prototype.bubbleParent = false;

  TitaniumWindow.prototype.open = function() {
    return this.trigger('open');
  };

  TitaniumWindow.prototype.close = function() {
    return this.trigger('close');
  };

  return TitaniumWindow;

})(TitaniumView);

Ti.UI.createWindow = function(attributes) {
  return new TitaniumWindow(attributes);
};

TitaniumNavigationGroup = (function(_super) {

  __extends(TitaniumNavigationGroup, _super);

  function TitaniumNavigationGroup() {
    return TitaniumNavigationGroup.__super__.constructor.apply(this, arguments);
  }

  TitaniumNavigationGroup.prototype.open = function() {
    return this.trigger('open');
  };

  TitaniumNavigationGroup.prototype.close = function() {
    return this.trigger('close');
  };

  return TitaniumNavigationGroup;

})(TitaniumView);

Ti.UI.iPhone.createNavigationGroup = function(attributes) {
  return new TitaniumNavigationGroup(attributes);
};

TitaniumSplitWindow = (function(_super) {

  __extends(TitaniumSplitWindow, _super);

  function TitaniumSplitWindow() {
    return TitaniumSplitWindow.__super__.constructor.apply(this, arguments);
  }

  return TitaniumSplitWindow;

})(TitaniumView);

Ti.UI.iPad.createSplitWindow = function(attributes) {
  return new TitaniumSplitWindow(attributes);
};

TitaniumAdView = (function(_super) {

  __extends(TitaniumAdView, _super);

  function TitaniumAdView() {
    return TitaniumAdView.__super__.constructor.apply(this, arguments);
  }

  return TitaniumAdView;

})(TitaniumView);

Ti.UI.iOS.createAdView = function(attributes) {
  return new TitaniumAdView(attributes);
};

TitaniumHttpClient = (function() {

  TitaniumHttpClient.mock = function(mocks, options) {
    this.mocks = mocks;
    this.options = options != null ? options : {};
  };

  TitaniumHttpClient.resetMock = function() {
    return this.mocks = [];
  };

  function TitaniumHttpClient(options) {
    this.options = options;
    this.headers = {};
  }

  TitaniumHttpClient.prototype.open = function(method, url) {
    this.method = method;
    this.url = url;
  };

  TitaniumHttpClient.prototype.send = function(data) {
    var handleResponse, mock, response, wait,
      _this = this;
    mock = _.find(TitaniumHttpClient.mocks, function(mock) {
      return mock.url === _this.url && mock.method === _this.method;
    });
    handleResponse = function() {
      var handler, _ref, _ref1;
      handler = (_ref = _this.status) === 200 ? 'onload' : 'onerror';
      return (_ref1 = _this.options[handler]) != null ? _ref1.call(_this, {
        source: _this
      }) : void 0;
    };
    if (!mock) {
      this.status = 501;
      handleResponse();
      return;
    }
    response = _.isFunction(mock.response) ? mock.response(data) : mock.response;
    _.extend(this, response);
    if (wait = TitaniumHttpClient.options.wait) {
      return setTimeout(handleResponse, wait);
    } else {
      return handleResponse();
    }
  };

  TitaniumHttpClient.prototype.setRequestHeader = function(name, value) {
    return this.headers[name] = value;
  };

  return TitaniumHttpClient;

})();

Ti.Network = {
  HTTPClient: TitaniumHttpClient,
  createHttpClient: function(options) {
    return new TitaniumHttpClient(options);
  }
};
